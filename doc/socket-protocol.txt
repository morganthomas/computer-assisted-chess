A socket server is used for all game-related communication between client
and server.

On connection the server sends a message:
  you-are <user object>

CHALLENGE PROTOCOL

The server can receive the following messages related to challenges:
  create-challenge <receiver username>
  delete-challenge <challenge ID>
  accept-challenge <challenge ID>

The server can send the following messages related to challenges:
  create-challenge { id: <challenge ID>, sender: <sender ID>, receiver: <receiver ID> }
  delete-challenge <challenge ID>
  challenge-status-change { id: <challenge ID>, status: <new status>, newGame: <game if a new one was created> }
  challenge-error <error message>

On connection, the server sends a bunch of create-challenge and challenge-status-change
messages to tell the client about all of their active challenges. When this is
done, the server sends:
   active-challenges-loaded

GAME PROTOCOL

Both client and server can send this message:
  move { game: <game ID>, move: <move>, index: <index of move in move log> }

This message means that a player made the given move in the given
game. The client sends this when they are attempting to make a move. If the server
accepts their move, it sends the same message to both players. The sender
will in fact ignore this message and update its state immediately upon sending
the message.

The server sends this message to a client if it rejects their move:
  move-rejected { game: <game ID>, move: <move>, why: <message> }

This should be impossible with proper use of the client, since the client checks
that moves are legal before sending them. It is intended for debugging purposes.
